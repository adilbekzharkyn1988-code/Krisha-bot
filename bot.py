import os
import requests
from bs4 import BeautifulSoup
from fpdf import FPDF
from PIL import Image
from io import BytesIO
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = os.environ.get("BOT_TOKEN")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ DejaVuSans
def get_dejavu_font_path():
    # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É TTF —à—Ä–∏—Ñ—Ç—É DejaVuSans.ttf
    return "DejaVuSans.ttf"  # –ø–æ–ª–æ–∂–∏ TTF —Ä—è–¥–æ–º —Å bot.py

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç üöÄ\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/pdf <—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ>\n—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å PDF —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π."
    )

async def create_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: /pdf <—Å—Å—ã–ª–∫–∞>")
        return

    ad_url = context.args[0]
    await update.message.reply_text(f"–°–æ–∑–¥–∞—é PDF –¥–ª—è {ad_url}... ‚è≥")

    try:
        # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        response = requests.get(ad_url, headers={"User-Agent": "Mozilla/5.0"})
        soup = BeautifulSoup(response.text, "html.parser")

        title_tag = soup.select_one("h1")
        title = title_tag.get_text(strip=True) if title_tag else "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        price_tag = soup.select_one("div.offer__price")
        price = price_tag.get_text(strip=True) if price_tag else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        desc_tag = soup.select_one("div.offer__description")
        description = desc_tag.get_text(strip=True) if desc_tag else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        img_tag = soup.select_one("img.gallery__image")
        img_url = img_tag.get("src") if img_tag else None

        # –°–æ–∑–¥–∞—ë–º PDF
        pdf = FPDF()
        pdf.add_page()
        font_path = get_dejavu_font_path()
        pdf.add_font('DejaVu', '', font_path, uni=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font('DejaVu', '', 16)
        pdf.multi_cell(0, 10, title, align='C')
        pdf.ln(5)

        # –¶–µ–Ω–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        pdf.set_font('DejaVu', '', 12)
        pdf.multi_cell(0, 8, f"{price}\n\n{description}\n\n–°—Å—ã–ª–∫–∞: {ad_url}")
        pdf.ln(5)

        # –§–æ—Ç–æ
        if img_url:
            try:
                img_response = requests.get(img_url)
                image = Image.open(BytesIO(img_response.content))
                img_path = "temp.jpg"
                image.save(img_path)
                pdf.image(img_path, w=150)
                os.remove(img_path)
                pdf.ln(5)
            except:
                pass

        pdf_path = "krisha_ad.pdf"
        pdf.output(pdf_path)

        with open(pdf_path, "rb") as f:
            await update.message.reply_document(f)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pdf", create_pdf))
    app.run_polling()

if __name__ == "__main__":
    main()
