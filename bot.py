import os
import requests
from bs4 import BeautifulSoup
from fpdf import FPDF
from PIL import Image
from io import BytesIO
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = os.environ.get("BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç üöÄ\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/pdf <—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ>\n—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π PDF."
    )

class PDF(FPDF):
    def add_image_row(self, img_paths, max_width=180, spacing=5):
        # –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä—è–¥
        x_start = self.get_x()
        y_start = self.get_y()
        max_height = 0
        for img_path in img_paths:
            try:
                w, h = Image.open(img_path).size
                ratio = max_width / len(img_paths) / w
                w_new = w * ratio
                h_new = h * ratio
                if self.get_x() + w_new > 190:  # –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                    self.ln(max_height + spacing)
                    self.set_x(x_start)
                    max_height = 0
                self.image(img_path, x=self.get_x(), y=self.get_y(), w=w_new)
                self.set_x(self.get_x() + w_new + spacing)
                max_height = max(max_height, h_new)
            except:
                continue
        self.ln(max_height + spacing)

async def create_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: /pdf <—Å—Å—ã–ª–∫–∞>")
        return

    ad_url = context.args[0]
    await update.message.reply_text(f"–°–æ–∑–¥–∞—é PDF –¥–ª—è {ad_url}... ‚è≥")

    try:
        response = requests.get(ad_url, headers={"User-Agent": "Mozilla/5.0"})
        soup = BeautifulSoup(response.text, "html.parser")

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        title_tag = soup.select_one("h1")
        title = title_tag.get_text(strip=True) if title_tag else "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        # –¶–µ–Ω–∞
        price_tag = soup.select_one("div.offer__price")
        price = price_tag.get_text(strip=True) if price_tag else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_tag = soup.select_one("div.offer__description")
        description = desc_tag.get_text(strip=True) if desc_tag else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        # –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        img_tags = soup.select("img.gallery__image")
        img_urls = [img.get("src") for img in img_tags if img.get("src")]
        img_paths = []

        for i, img_url in enumerate(img_urls):
            try:
                img_response = requests.get(img_url)
                image = Image.open(BytesIO(img_response.content))
                img_path = f"temp_{i}.jpg"
                image.save(img_path)
                img_paths.append(img_path)
            except:
                continue

        # –°–æ–∑–¥–∞—ë–º PDF
        pdf = PDF()
        pdf.add_page()
        pdf.set_auto_page_break(auto=True, margin=15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font("Arial", "B", 16)
        pdf.multi_cell(0, 10, title, align="C")
        pdf.ln(5)

        # –¶–µ–Ω–∞
        pdf.set_font("Arial", "B", 14)
        pdf.multi_cell(0, 8, price)
        pdf.ln(3)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 6, description)
        pdf.ln(5)

        # –§–æ—Ç–æ
        if img_paths:
            pdf.add_image_row(img_paths)
            for path in img_paths:
                os.remove(path)

        # –°—Å—ã–ª–∫–∞
        pdf.ln(5)
        pdf.set_font("Arial", "I", 10)
        pdf.multi_cell(0, 6, f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad_url}")

        pdf_path = "krisha_ad.pdf"
        pdf.output(pdf_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        with open(pdf_path, "rb") as f:
            await update.message.reply_document(f)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pdf", create_pdf))
    app.run_polling()

if __name__ == "__main__":
    main()
